# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2



# Create a YAML alias for the deploy step so we can reuse it later
deploy-core: &deploy-core
  docker:
    - image: circleci/node:12
  working_directory: ~/repo
  steps:
    - checkout
    - run:
        name: Download CF CLI
        command: |
          curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
          sudo dpkg -i cf-cli_amd64.deb
          cf -v

    - run:
        name: Build and deploy API
        command: |
          pwd
          export SPACE="$CIRCLE_BRANCH"
          case $SPACE in
            dev | staging | prod)
              echo "Using SPACE $SPACE"
              ;;
            *)
              SPACE="dev"
              echo "setting SPACE to $SPACE"
          esac

          rm -f manifest.yml
          cp manifest.${SPACE}.yml manifest.yml
          echo "{ \"version\" : \"circle-${CIRCLE_BUILD_NUM}\", \"build_data\" :  \"`date`\"} " > server/version.json

          # Documentation for service accounts here: https://cloud.gov/docs/services/cloud-gov-service-account/

          export UNAME_VAR=CF_USERNAME_${SPACE}
          export PWD_VAR=CF_PASSWORD_${SPACE}

          echo "Target is ${SPACE}"
          cf login -a https://api.fr.cloud.gov -u ${!UNAME_VAR} -p ${!PWD_VAR} -o gsa-ogp-srt -s ${SPACE}
          cf push srt-server-${SPACE}


jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/node:12
        environment:
          NODE_ENV: circleci
          CC_TEST_REPORTER_ID: b0a733c16dd63abc6cb21bf9956550d57e05724bc92e58892b306af99963a261
          JWT_SECRET: abc123

      - image: circleci/postgres:12
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: srt
          POSTGRES_PASSWORD: srtpass

#    parallelism: 3

    working_directory: ~/repo

    steps:
      - checkout

      - run: sudo apt update
      - run: sudo apt install postgresql-client

      - run:
          name: Waiting for PostgreSQL to start
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 2
            done
            echo Failed waiting for Postgres && exit 1

      # Download and cache dependencies
      - restore_cache:
          key: v1.1-dependencies-{{ checksum "package.json" }}-{{ checksum ".snyk" }}

      - run: test ! -d node_modules && npm install || echo "node modules were cached"

      - save_cache:
          paths:
            - node_modules
            - cc-test-reporter
          key: v1.1-dependencies-{{ checksum "package.json" }}-{{ checksum ".snyk" }}

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run: cp srt-db.crypt srt-database.sql.gz
      - run: ./node_modules/.bin/cryptify -p ${CRYPTIFY} -c aes-256-cbc -d srt-database.sql.gz
      - run: rm srt-database.sql || true
      - run: gzip -d srt-database.sql.gz
      - run: export PGPASSWORD=srtpass && psql -h "localhost"  srt circleci < srt-database.sql
      - run: ./node_modules/.bin/sequelize --config ./server/config/dbConfig.js db:migrate
      - run: node ./server/loadPredictions.js

      - run:
         name: Run the Tests
         environment:
           NODE_ENV: circle
#          command: npm run circleci
         command: |
              ./cc-test-reporter before-build
              npm run circleci
              ./cc-test-reporter after-build --coverage-input-type lcov --exit-code $?





  deploy-dev:
    <<: *deploy-core

  deploy:
    <<: *deploy-core

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test

      - deploy-dev:
          requires:
            - test
          filters:
            branches:
              only:
                - dev
                - agency-name-sync

      - hold:
          requires:
            - test
          type: approval
          filters:
            branches:
              only:
                - staging
                - prod
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
                - staging
                - prod
